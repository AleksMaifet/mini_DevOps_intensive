services:
  db:
    image: postgres:latest
    container_name: devops-postgres
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./backend/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${DB_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer
    container_name: adminer
    ports:
      - "8090:8080"
    depends_on:
      db:
        condition: service_healthy
    restart: "no"

  backend:
    build:
      context: ./backend
    image: ${DOCKER_USER}/devops-backend:${IMAGE_TAG}
    container_name: devops-backend
    depends_on:
      db:
        condition: service_healthy
    environment:
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
    ports:
      - "8080:8080"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/api/health" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s

  front:
    build:
      context: ./frontend
      args:
        VITE_BACKEND_URL: http://localhost:8080/api
    image: ${DOCKER_USER}/devops-frontend:${IMAGE_TAG}
    container_name: devops-frontend
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "3000:80"

volumes:
  pgdata:
    name: "devops-postgres"